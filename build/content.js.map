{"version":3,"file":"content.js","mappings":"mBAEA,MAEMA,EAAmBC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYD,kBAAoB,GACnDE,EAAgB,GAAEF,WAElBG,EAAuB,GAAEH,QACzBI,EAA0B,GAAEJ,WCA3B,MAAMK,EAAgC,qBAAfC,WAA6BA,WAA+B,qBAAXC,OAAyBA,OAAyB,qBAATC,KAAuBA,KAAyB,qBAAXC,OAAyBA,OAAsBC,SAHhM,eCFL,MAAMC,GDMiBC,ECNM,SDMAC,ECNUR,EAAQS,QDOpB,qBAAlBT,EAAQO,GAAwBC,EAAWR,EAAQO,IAD5D,IAAuBA,EAAMC,EEApC,MAAME,EAAOJ,EAAOK,QAAQC,QAAQ,CAAEL,KAAMV,IAG5Ca,EAAKG,UAAUC,aAAaC,IACxBX,OAAOY,YAAY,IAAKD,EAAME,OAAQlB,GAA0B,QAIpEK,OAAOc,iBAAiB,WAAW,IAAsC,IAArC,KAAEH,EAAF,OAAQI,GAA4B,EAChEA,IAAWf,QAAUW,EAAKE,SAAWnB,GAIzCY,EAAKM,YAAYD,MAIrB,MAAMK,EAASC,SAASC,cAAc,UAEtCF,EAAOG,IAAMjB,EAAOkB,UAAUC,OAAO,WAErCL,EAAOM,OAAS,KAERN,EAAOO,YACPP,EAAOO,WAAWC,YAAYR,KAIrCC,SAASQ,MAAQR,SAASS,iBAAiBC,YAAYX,I","sources":["../node_modules/metadot-extension-base/defaults.js","../node_modules/@polkadot/x-global/index.js","../node_modules/@polkadot/extension-inject/chrome.js","content.ts"],"sourcesContent":["// Copyright 2019-2022 @polkadot/extension-base authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ALLOWED_PATH = ['/', '/account/import-ledger', '/account/restore-json'];\nconst PHISHING_PAGE_REDIRECT = '/phishing-page-detected';\nconst EXTENSION_PREFIX = process.env.EXTENSION_PREFIX || '';\nconst PORT_CONTENT = `${EXTENSION_PREFIX}content`;\nconst PORT_EXTENSION = `${EXTENSION_PREFIX}extension`;\nconst MESSAGE_ORIGIN_PAGE = `${EXTENSION_PREFIX}page`;\nconst MESSAGE_ORIGIN_CONTENT = `${EXTENSION_PREFIX}content`;\nconst PASSWORD_EXPIRY_MIN = 15;\nconst PASSWORD_EXPIRY_MS = PASSWORD_EXPIRY_MIN * 60 * 1000;\nexport { ALLOWED_PATH, PASSWORD_EXPIRY_MIN, PASSWORD_EXPIRY_MS, PHISHING_PAGE_REDIRECT, EXTENSION_PREFIX, PORT_CONTENT, PORT_EXTENSION, MESSAGE_ORIGIN_PAGE, MESSAGE_ORIGIN_CONTENT };","// Copyright 2017-2022 @polkadot/x-global authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nexport { packageInfo } from \"./packageInfo.js\";\n\nfunction evaluateThis(fn) {\n  return fn('return this');\n}\n\nexport const xglobal = typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis(Function);\nexport function extractGlobal(name, fallback) {\n  return typeof xglobal[name] === 'undefined' ? fallback : xglobal[name];\n}\nexport function exposeGlobal(name, fallback) {\n  if (typeof xglobal[name] === 'undefined') {\n    xglobal[name] = fallback;\n  }\n}","// Copyright 2019-2022 @polkadot/extension-inject authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { extractGlobal, xglobal } from '@polkadot/x-global';\nexport const chrome = extractGlobal('chrome', xglobal.browser);","import type { Message } from 'metadot-extension-base/types';\nimport {\n    MESSAGE_ORIGIN_CONTENT,\n    MESSAGE_ORIGIN_PAGE,\n    PORT_CONTENT,\n} from 'metadot-extension-base/defaults';\nimport { chrome } from '@polkadot/extension-inject/chrome';\n\n// connect to the extension\nconst port = chrome.runtime.connect({ name: PORT_CONTENT });\n\n// send any messages from the extension back to the page\nport.onMessage.addListener((data): void => {\n    window.postMessage({ ...data, origin: MESSAGE_ORIGIN_CONTENT }, '*');\n});\n\n// all messages from the page, pass them to the extension\nwindow.addEventListener('message', ({ data, source }: Message): void => {\n    if (source !== window || data.origin !== MESSAGE_ORIGIN_PAGE) {\n        return;\n    }\n\n    port.postMessage(data);\n});\n\n// inject our data injector\nconst script = document.createElement('script');\n\nscript.src = chrome.extension.getURL('page.js');\n\nscript.onload = (): void => {\n    // remove the injecting tag when loaded\n    if (script.parentNode) {\n        script.parentNode.removeChild(script);\n    }\n};\n\n(document.head || document.documentElement).appendChild(script);\n"],"names":["EXTENSION_PREFIX","process","PORT_CONTENT","MESSAGE_ORIGIN_PAGE","MESSAGE_ORIGIN_CONTENT","xglobal","globalThis","global","self","window","Function","chrome","name","fallback","browser","port","runtime","connect","onMessage","addListener","data","postMessage","origin","addEventListener","source","script","document","createElement","src","extension","getURL","onload","parentNode","removeChild","head","documentElement","appendChild"],"sourceRoot":""}